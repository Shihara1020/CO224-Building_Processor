$date
	Mon Jun 30 10:51:06 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 8 & mux2_out [7:0] $end
$var wire 8 ' mux1_out [7:0] $end
$var wire 3 ( WRITEREG [2:0] $end
$var wire 1 ) WRITEENABLE $end
$var wire 8 * WRITEDATA [7:0] $end
$var wire 8 + REGOUT2 [7:0] $end
$var wire 8 , REGOUT1 [7:0] $end
$var wire 3 - READREG2 [2:0] $end
$var wire 3 . READREG1 [2:0] $end
$var wire 32 / PC [31:0] $end
$var wire 8 0 OPCODE [7:0] $end
$var wire 1 1 NEMUX $end
$var wire 8 2 NEGATIVENUMBER [7:0] $end
$var wire 8 3 IMMEDIATE [7:0] $end
$var wire 1 4 ALUSRC $end
$var wire 3 5 ALUOP [2:0] $end
$scope module ALU $end
$var wire 3 6 SELECT [2:0] $end
$var wire 8 7 RESULT [7:0] $end
$var wire 8 8 I3 [7:0] $end
$var wire 8 9 I2 [7:0] $end
$var wire 8 : I1 [7:0] $end
$var wire 8 ; I0 [7:0] $end
$var wire 8 < DATA2 [7:0] $end
$var wire 8 = DATA1 [7:0] $end
$upscope $end
$scope module DECODER $end
$var wire 32 > INSTRUCTION [31:0] $end
$var reg 8 ? IMMEDIATE [7:0] $end
$var reg 8 @ OPCODE [7:0] $end
$var reg 3 A READREG1 [2:0] $end
$var reg 3 B READREG2 [2:0] $end
$var reg 3 C WRITEREG [2:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 1 1 select $end
$var wire 8 D OUTPUT [7:0] $end
$var wire 8 E DATA2 [7:0] $end
$var wire 8 F DATA1 [7:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 8 G DATA1 [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 1 4 select $end
$var wire 8 I OUTPUT [7:0] $end
$upscope $end
$scope module PCUNIT $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 J nextpc [31:0] $end
$var reg 32 K PC [31:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 1 " CLK $end
$var wire 8 L IN [7:0] $end
$var wire 3 M INADDRESS [2:0] $end
$var wire 8 N OUT1 [7:0] $end
$var wire 3 O OUT1ADDRESS [2:0] $end
$var wire 8 P OUT2 [7:0] $end
$var wire 3 Q OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ) WRITE $end
$upscope $end
$scope module control $end
$var wire 8 R OPCODE [7:0] $end
$var reg 3 S ALUOP [2:0] $end
$var reg 1 4 ALUSRC $end
$var reg 1 1 NEMUX $end
$var reg 1 ) WRITEENABLE $end
$upscope $end
$scope module twos $end
$var wire 8 T DATA_IN [7:0] $end
$var reg 8 U DATA_OUT [7:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 V i [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 W \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 X \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 Y \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 Z \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 [ \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 \ \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 ] \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 ^ \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
b1000 V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
x4
bx 3
bx 2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
0$
bx #
0"
bx !
$end
#20
1$
#40
1"
#50
b0 !
b0 /
b0 K
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
#60
b100 J
0$
#70
b101 3
b101 ?
b101 G
b100 (
b100 C
b100 M
b101 -
b101 B
b101 Q
b0 .
b0 A
b0 O
b101 0
b101 @
b101 R
b101000001000000000000000101 #
b101000001000000000000000101 %
b101000001000000000000000101 >
#80
b101 &
b101 <
b101 I
01
04
b0 5
b0 6
b0 S
1)
0"
#90
b101 *
b101 7
b101 L
b0 '
b0 D
b0 H
b101 8
b0 9
b101 ;
b0 +
b0 F
b0 P
b0 T
b0 ,
b0 =
b0 N
#100
b0 2
b0 E
b0 U
b101 :
#120
1"
#130
b100 !
b100 /
b100 K
b101 [
#140
b1000 J
#150
b1001 &
b1001 <
b1001 I
b1001 3
b1001 ?
b1001 G
b10 (
b10 C
b10 M
b1 -
b1 B
b1 Q
b101000000100000000000001001 #
b101000000100000000000001001 %
b101000000100000000000001001 >
#160
b1001 *
b1001 7
b1001 L
b1001 8
b1001 ;
0"
#170
b1001 :
#200
1"
#210
b1000 !
b1000 /
b1000 K
b1001 Y
#220
b1100 J
#230
b10 &
b10 <
b10 I
b10 3
b10 ?
b10 G
b110 (
b110 C
b110 M
b10 -
b10 B
b10 Q
b100 .
b100 A
b100 O
b0 0
b0 @
b0 R
b1100000010000000010 #
b1100000010000000010 %
b1100000010000000010 >
#240
b0 &
b0 <
b0 I
b10 8
b10 ;
14
b1 5
b1 6
b1 S
0"
#250
b1001 &
b1001 <
b1001 I
b101 *
b101 7
b101 L
b1001 '
b1001 D
b1001 H
b101 8
b0 ;
b101 :
b1001 +
b1001 F
b1001 P
b1001 T
b101 ,
b101 =
b101 N
#260
b1101 8
b1 9
b1001 ;
b11110111 2
b11110111 E
b11110111 U
#270
b1110 *
b1110 7
b1110 L
b1110 :
#280
1"
#290
b1100 !
b1100 /
b1100 K
b1110 ]
#300
b10000 J
#310
b110 3
b110 ?
b110 G
b0 (
b0 C
b0 M
b110 -
b110 B
b110 Q
b0 .
b0 A
b0 O
b100 0
b100 @
b100 R
b100000000000000000000000110 #
b100000000000000000000000110 %
b100000000000000000000000110 >
#320
b1001 *
b1001 7
b1001 L
b0 5
b0 6
b0 S
0"
#330
b1110 &
b1110 <
b1110 I
b1110 '
b1110 D
b1110 H
b1110 +
b1110 F
b1110 P
b1110 T
b0 ,
b0 =
b0 N
#340
b1110 *
b1110 7
b1110 L
b1110 ;
b11110010 2
b11110010 E
b11110010 U
b0 9
b1110 8
#360
1"
#370
b10000 !
b10000 /
b10000 K
b1110 W
#380
b10100 J
#390
b1 3
b1 ?
b1 G
b1 (
b1 C
b1 M
b1 -
b1 B
b1 Q
b101 0
b101 @
b101 R
b101000000010000000000000001 #
b101000000010000000000000001 %
b101000000010000000000000001 >
b1110 ,
b1110 =
b1110 N
#400
b1 &
b1 <
b1 I
04
b1110 9
0"
#410
b0 '
b0 D
b0 H
b1 *
b1 7
b1 L
b0 9
b1111 8
b1 ;
b0 +
b0 F
b0 P
b0 T
b1111 :
#420
b0 2
b0 E
b0 U
#440
1"
#450
b10100 !
b10100 /
b10100 K
b1 X
#460
b11000 J
#470
b10 (
b10 C
b10 M
b10 .
b10 A
b10 O
b0 0
b0 @
b0 R
b1 '
b1 D
b1 H
b100000001000000001 #
b100000001000000001 %
b100000001000000001 >
b1 +
b1 F
b1 P
b1 T
#480
b1111 *
b1111 7
b1111 L
14
b1 5
b1 6
b1 S
b11111111 2
b11111111 E
b11111111 U
0"
#490
b1001 ,
b1001 =
b1001 N
#500
b1001 8
b1 9
#510
b1010 *
b1010 7
b1010 L
b1010 :
#520
1"
#530
b11000 !
b11000 /
b11000 K
b1010 Y
#540
b11100 J
#550
bx 3
bx ?
bx G
bx (
bx C
bx M
bx -
bx B
bx Q
bx .
bx A
bx O
bx 0
bx @
bx R
bx #
bx %
bx >
b1010 ,
b1010 =
b1010 N
#560
b0 9
b1011 8
0"
#570
bx &
bx <
bx I
bx '
bx D
bx H
b1011 *
b1011 7
b1011 L
bx +
bx F
bx P
bx T
bx ,
bx =
bx N
b1011 :
#580
bx ;
bx 2
bx E
bx U
bx 8
bx 9
#590
bx *
bx 7
bx L
bx :
#600
1"
#610
b11100 !
b11100 /
b11100 K
#620
b100000 J
#640
0"
#680
1"
#690
b100000 !
b100000 /
b100000 K
#700
b100100 J
#720
0"
#760
1"
#770
b100100 !
b100100 /
b100100 K
#780
b101000 J
#800
0"
#840
1"
#850
b101000 !
b101000 /
b101000 K
#860
b101100 J
#880
0"
#920
1"
#930
b101100 !
b101100 /
b101100 K
#940
b110000 J
#960
0"
#1000
1"
#1010
b110000 !
b110000 /
b110000 K
#1020
b110100 J
#1040
0"
#1080
1"
#1090
b110100 !
b110100 /
b110100 K
#1100
b111000 J
#1120
0"
#1160
1"
#1170
b111000 !
b111000 /
b111000 K
#1180
b111100 J
#1200
0"
#1240
1"
#1250
b111100 !
b111100 /
b111100 K
#1260
b1000000 J
#1280
0"
#1320
1"
#1330
b1000000 !
b1000000 /
b1000000 K
#1340
b1000100 J
#1360
0"
#1400
1"
#1410
b1000100 !
b1000100 /
b1000100 K
#1420
b1001000 J
#1440
0"
#1480
1"
#1490
b1001000 !
b1001000 /
b1001000 K
#1500
b1001100 J
#1520
0"
#1560
1"
#1570
b1001100 !
b1001100 /
b1001100 K
#1580
b1010000 J
#1600
0"
#1640
1"
#1650
b1010000 !
b1010000 /
b1010000 K
#1660
b1010100 J
#1680
0"
#1720
1"
#1730
b1010100 !
b1010100 /
b1010100 K
#1740
b1011000 J
#1760
0"
#1800
1"
#1810
b1011000 !
b1011000 /
b1011000 K
#1820
b1011100 J
#1840
0"
#1880
1"
#1890
b1011100 !
b1011100 /
b1011100 K
#1900
b1100000 J
#1920
0"
#1960
1"
#1970
b1100000 !
b1100000 /
b1100000 K
#1980
b1100100 J
#2000
0"
#2040
1"
#2050
b1100100 !
b1100100 /
b1100100 K
#2060
b1101000 J
#2080
0"
#2120
1"
#2130
b1101000 !
b1101000 /
b1101000 K
#2140
b1101100 J
#2160
0"
#2200
1"
#2210
b1101100 !
b1101100 /
b1101100 K
#2220
b1110000 J
#2240
0"
#2280
1"
#2290
b1110000 !
b1110000 /
b1110000 K
#2300
b1110100 J
#2320
0"
#2360
1"
#2370
b1110100 !
b1110100 /
b1110100 K
#2380
b1111000 J
#2400
0"
#2440
1"
#2450
b1111000 !
b1111000 /
b1111000 K
#2460
b1111100 J
#2480
0"
#2520
1"
#2530
b1111100 !
b1111100 /
b1111100 K
#2540
b10000000 J
#2560
0"
#2600
1"
#2610
b10000000 !
b10000000 /
b10000000 K
#2620
b10000100 J
#2640
0"
#2680
1"
#2690
b10000100 !
b10000100 /
b10000100 K
#2700
b10001000 J
#2720
0"
#2760
1"
#2770
b10001000 !
b10001000 /
b10001000 K
#2780
b10001100 J
#2800
0"
#2840
1"
#2850
b10001100 !
b10001100 /
b10001100 K
#2860
b10010000 J
#2880
0"
#2920
1"
#2930
b10010000 !
b10010000 /
b10010000 K
#2940
b10010100 J
#2960
0"
#3000
1"
#3010
b10010100 !
b10010100 /
b10010100 K
#3020
b10011000 J
#3040
0"
#3080
1"
#3090
b10011000 !
b10011000 /
b10011000 K
#3100
b10011100 J
#3120
0"
#3160
1"
#3170
b10011100 !
b10011100 /
b10011100 K
#3180
b10100000 J
#3200
0"
#3240
1"
#3250
b10100000 !
b10100000 /
b10100000 K
#3260
b10100100 J
#3280
0"
#3320
1"
#3330
b10100100 !
b10100100 /
b10100100 K
#3340
b10101000 J
#3360
0"
#3400
1"
#3410
b10101000 !
b10101000 /
b10101000 K
#3420
b10101100 J
#3440
0"
#3480
1"
#3490
b10101100 !
b10101100 /
b10101100 K
#3500
b10110000 J
#3520
0"
#3560
1"
#3570
b10110000 !
b10110000 /
b10110000 K
#3580
b10110100 J
#3600
0"
#3640
1"
#3650
b10110100 !
b10110100 /
b10110100 K
#3660
b10111000 J
#3680
0"
#3720
1"
#3730
b10111000 !
b10111000 /
b10111000 K
#3740
b10111100 J
#3760
0"
#3800
1"
#3810
b10111100 !
b10111100 /
b10111100 K
#3820
b11000000 J
#3840
0"
#3880
1"
#3890
b11000000 !
b11000000 /
b11000000 K
#3900
b11000100 J
#3920
0"
#3960
1"
#3970
b11000100 !
b11000100 /
b11000100 K
#3980
b11001000 J
#4000
0"
#4040
1"
#4050
b11001000 !
b11001000 /
b11001000 K
#4060
b11001100 J
#4080
0"
#4120
1"
#4130
b11001100 !
b11001100 /
b11001100 K
#4140
b11010000 J
#4160
0"
#4200
1"
#4210
b11010000 !
b11010000 /
b11010000 K
#4220
b11010100 J
#4240
0"
#4280
1"
#4290
b11010100 !
b11010100 /
b11010100 K
#4300
b11011000 J
#4320
0"
#4360
1"
#4370
b11011000 !
b11011000 /
b11011000 K
#4380
b11011100 J
#4400
0"
#4440
1"
#4450
b11011100 !
b11011100 /
b11011100 K
#4460
b11100000 J
#4480
0"
#4520
1"
#4530
b11100000 !
b11100000 /
b11100000 K
#4540
b11100100 J
#4560
0"
#4600
1"
#4610
b11100100 !
b11100100 /
b11100100 K
#4620
b11101000 J
#4640
0"
#4680
1"
#4690
b11101000 !
b11101000 /
b11101000 K
#4700
b11101100 J
#4720
0"
#4760
1"
#4770
b11101100 !
b11101100 /
b11101100 K
#4780
b11110000 J
#4800
0"
#4840
1"
#4850
b11110000 !
b11110000 /
b11110000 K
#4860
b11110100 J
#4880
0"
#4920
1"
#4930
b11110100 !
b11110100 /
b11110100 K
#4940
b11111000 J
#4960
0"
#5000
1"
#5010
b11111000 !
b11111000 /
b11111000 K
#5020
b11111100 J
#5040
0"
#5060
