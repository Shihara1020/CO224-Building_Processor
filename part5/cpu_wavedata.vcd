$date
	Mon Jun 30 11:15:07 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 8 & mux2_out [7:0] $end
$var wire 8 ' mux1_out [7:0] $end
$var wire 1 ( ZERO $end
$var wire 3 ) WRITEREG [2:0] $end
$var wire 1 * WRITEENABLE $end
$var wire 8 + WRITEDATA [7:0] $end
$var wire 8 , REGOUT2 [7:0] $end
$var wire 8 - REGOUT1 [7:0] $end
$var wire 3 . READREG2 [2:0] $end
$var wire 3 / READREG1 [2:0] $end
$var wire 32 0 PC [31:0] $end
$var wire 8 1 OPCODE [7:0] $end
$var wire 8 2 OFFSET [7:0] $end
$var wire 1 3 NEMUX $end
$var wire 8 4 NEGATIVENUMBER [7:0] $end
$var wire 8 5 IMMEDIATE [7:0] $end
$var wire 2 6 BRANCH [1:0] $end
$var wire 1 7 ALUSRC $end
$var wire 3 8 ALUOP [2:0] $end
$scope module ALU $end
$var wire 1 ( ZERO $end
$var wire 3 9 SELECT [2:0] $end
$var wire 8 : RESULT [7:0] $end
$var wire 8 ; I7 [7:0] $end
$var wire 8 < I6 [7:0] $end
$var wire 8 = I5 [7:0] $end
$var wire 8 > I4 [7:0] $end
$var wire 8 ? I3 [7:0] $end
$var wire 8 @ I2 [7:0] $end
$var wire 8 A I1 [7:0] $end
$var wire 8 B I0 [7:0] $end
$var wire 8 C DATA2 [7:0] $end
$var wire 8 D DATA1 [7:0] $end
$upscope $end
$scope module DECODER $end
$var wire 32 E INSTRUCTION [31:0] $end
$var reg 8 F IMMEDIATE [7:0] $end
$var reg 8 G OFFSET [7:0] $end
$var reg 8 H OPCODE [7:0] $end
$var reg 3 I READREG1 [2:0] $end
$var reg 3 J READREG2 [2:0] $end
$var reg 3 K WRITEREG [2:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 1 3 select $end
$var wire 8 L OUTPUT [7:0] $end
$var wire 8 M DATA2 [7:0] $end
$var wire 8 N DATA1 [7:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 8 O DATA1 [7:0] $end
$var wire 8 P DATA2 [7:0] $end
$var wire 1 7 select $end
$var wire 8 Q OUTPUT [7:0] $end
$upscope $end
$scope module PCUNIT $end
$var wire 1 R Branching $end
$var wire 1 " CLK $end
$var wire 8 S OFFSET [7:0] $end
$var wire 1 $ RESET $end
$var wire 1 ( ZERO $end
$var wire 1 T selector $end
$var wire 32 U nextpc [31:0] $end
$var wire 32 V PC_plus_four [31:0] $end
$var wire 32 W OFFSET_EXTENDED [31:0] $end
$var wire 32 X BRANCH_TARGET [31:0] $end
$var wire 2 Y BRANCH [1:0] $end
$var reg 32 Z PC [31:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 1 " CLK $end
$var wire 8 [ IN [7:0] $end
$var wire 3 \ INADDRESS [2:0] $end
$var wire 8 ] OUT1 [7:0] $end
$var wire 3 ^ OUT1ADDRESS [2:0] $end
$var wire 8 _ OUT2 [7:0] $end
$var wire 3 ` OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 * WRITE $end
$upscope $end
$scope module control $end
$var wire 8 a OPCODE [7:0] $end
$var reg 3 b ALUOP [2:0] $end
$var reg 1 7 ALUSRC $end
$var reg 2 c BRANCH [1:0] $end
$var reg 1 3 NEMUX $end
$var reg 1 * WRITEENABLE $end
$upscope $end
$scope module twos $end
$var wire 8 d DATA_IN [7:0] $end
$var reg 8 e DATA_OUT [7:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 f i [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 g \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 h \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 i \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 j \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 k \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 l \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 m \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module ALU $end
$upscope $end
$scope module DECODER $end
$upscope $end
$scope module MUX1 $end
$upscope $end
$scope module MUX2 $end
$upscope $end
$scope module PCUNIT $end
$upscope $end
$scope module REGFILE $end
$upscope $end
$scope module control $end
$upscope $end
$scope module twos $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module REGFILE $end
$var reg 8 n \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b1000 f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx00 W
bx V
bx U
xT
bx S
xR
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
x(
bx '
bx &
bx %
0$
bx #
0"
bx !
$end
#2
1$
#4
1"
#5
b0 !
b0 0
b0 Z
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
#6
b100 V
0$
#7
b0 W
b0 2
b0 G
b0 S
b1000 5
b1000 F
b1000 O
b0 )
b0 K
b0 \
b0 .
b0 J
b0 `
b0 /
b0 I
b0 ^
b101 1
b101 H
b101 a
b101000000000000000000001000 #
b101000000000000000000001000 %
b101000000000000000000001000 E
#8
b100 U
0T
0R
b1000 &
b1000 C
b1000 Q
b0 6
b0 Y
b0 c
03
07
b0 8
b0 9
b0 b
1*
0"
#9
0(
b1000 +
b1000 :
b1000 [
b0 '
b0 L
b0 P
b1000 ?
b0 @
b1000 B
b100 X
b0 ,
b0 N
b0 _
b0 d
b0 -
b0 D
b0 ]
#10
b0 4
b0 M
b0 e
b0 =
b1000 A
#11
b0 ;
b0 <
b0 >
#12
1"
#13
b100 !
b100 0
b100 Z
b1000 g
#14
b1000 U
b1000 V
#15
b100 W
b1001 &
b1001 C
b1001 Q
b1 2
b1 G
b1 S
b1001 5
b1001 F
b1001 O
b1 )
b1 K
b1 \
b1 .
b1 J
b1 `
b1000 '
b1000 L
b1000 P
b101000000010000000000001001 #
b101000000010000000000001001 %
b101000000010000000000001001 E
b1000 X
b1000 -
b1000 D
b1000 ]
b1000 ,
b1000 N
b1000 _
b1000 d
#16
b1001 +
b1001 :
b1001 [
b1001 B
b1000 @
b1001 ?
b11111000 4
b11111000 M
b11111000 e
0"
#17
b0 '
b0 L
b0 P
b100 ;
b1001000 >
b1100 X
b0 ,
b0 N
b0 _
b0 d
b10001 A
#18
b0 4
b0 M
b0 e
#20
1"
#21
b1001 h
b1000 !
b1000 0
b1000 Z
#22
b1100 U
b1100 V
#23
b1000 W
b1100 &
b1100 C
b1100 Q
b10 2
b10 G
b10 S
b1100 5
b1100 F
b1100 O
b10 )
b10 K
b10 \
b100 .
b100 J
b100 `
b1001 '
b1001 L
b1001 P
b101000000100000000000001100 #
b101000000100000000000001100 %
b101000000100000000000001100 E
b1001 ,
b1001 N
b1001 _
b1001 d
b10000 X
#24
b1100 +
b1100 :
b1100 [
b1100 ?
b1100 B
b11110111 4
b11110111 M
b11110111 e
0"
#25
b0 '
b0 L
b0 P
b1100000 >
b10000000 ;
b10100 A
b10100 X
b0 ,
b0 N
b0 _
b0 d
#26
b0 4
b0 M
b0 e
#28
1"
#29
b1100 !
b1100 0
b1100 Z
b1100 i
#30
b10000 U
b10000 V
#31
b1100 W
b0 &
b0 C
b0 Q
b11 2
b11 G
b11 S
b0 5
b0 F
b0 O
b11 )
b11 K
b11 \
b0 .
b0 J
b0 `
b1 /
b1 I
b1 ^
b1001 1
b1001 H
b1001 a
b1001000000110000000100000000 #
b1001000000110000000100000000 %
b1001000000110000000100000000 E
b11000 X
#32
b1100000 +
b1100000 :
b1100000 [
b0 @
b1000 ?
b0 B
17
b100 8
b100 9
b100 b
0"
#33
1(
b1000 &
b1000 C
b1000 Q
b0 +
b0 :
b0 [
b1000 '
b1000 L
b1000 P
b0 >
b1000 <
b1000 ;
b1000 =
b1001 A
b11100 X
b1000 ,
b1000 N
b1000 _
b1000 d
b1001 -
b1001 D
b1001 ]
#34
b1000 B
b11111000 4
b11111000 M
b11111000 e
b1001 ?
b1000 @
#35
0(
b1001000 +
b1001000 :
b1001000 [
b1001 ;
b0 <
b0 =
b1001000 >
b10001 A
#36
1"
#37
b1001000 j
b10000 !
b10000 0
b10000 Z
#38
b10100 U
b10100 V
#39
b10000 W
b100 2
b100 G
b100 S
b100 )
b100 K
b100 \
b0 /
b0 I
b0 ^
b1001000001000000000000000000 #
b1001000001000000000000000000 %
b1001000001000000000000000000 E
b100000 X
#40
0"
#41
b100100 X
b1000 -
b1000 D
b1000 ]
#42
b1000 ?
#43
b1000000 +
b1000000 :
b1000000 [
b1000 ;
b1000000 >
b10000 A
#44
1"
#45
b10100 !
b10100 0
b10100 Z
b1000000 k
#46
b11000 U
b11000 V
#47
b10100 W
b101 2
b101 G
b101 S
b10 5
b10 F
b10 O
b101 )
b101 K
b101 \
b10 .
b10 J
b10 `
b1 /
b1 I
b1 ^
b1001000001010000000100000010 #
b1001000001010000000100000010 %
b1001000001010000000100000010 E
b101000 X
#48
0"
#49
b1100 &
b1100 C
b1100 Q
b1100 '
b1100 L
b1100 P
b101100 X
b1100 ,
b1100 N
b1100 _
b1100 d
b1001 -
b1001 D
b1001 ]
#50
b1100 B
b11110100 4
b11110100 M
b11110100 e
b1101 ?
#51
b1101100 +
b1101100 :
b1101100 [
b10010000 ;
b1101100 >
b10101 A
#52
1"
#53
b1101100 l
b11000 !
b11000 0
b11000 Z
#54
b11100 U
b11100 V
#55
bx00 W
bx 2
bx G
bx S
bx 5
bx F
bx O
bx )
bx K
bx \
bx .
bx J
bx `
bx /
bx I
bx ^
bx 1
bx H
bx a
bx #
bx %
bx E
b110000 X
#56
0"
#57
bx &
bx C
bx Q
bx '
bx L
bx P
bx X
bx ,
bx N
bx _
bx d
bx -
bx D
bx ]
#58
bx B
bx 4
bx M
bx e
bx @
bx ?
#59
x(
bx +
bx :
bx [
bx ;
bx =
bx <
bx >
bx A
#60
1"
#61
b11100 !
b11100 0
b11100 Z
#62
b100000 U
b100000 V
#64
0"
#68
1"
#69
b100000 !
b100000 0
b100000 Z
#70
b100100 U
b100100 V
#72
0"
#76
1"
#77
b100100 !
b100100 0
b100100 Z
#78
b101000 U
b101000 V
#80
0"
#84
1"
#85
b101000 !
b101000 0
b101000 Z
#86
b101100 U
b101100 V
#88
0"
#92
1"
#93
b101100 !
b101100 0
b101100 Z
#94
b110000 U
b110000 V
#96
0"
#100
1"
#101
b110000 !
b110000 0
b110000 Z
#102
b110100 U
b110100 V
#104
0"
#108
1"
#109
b110100 !
b110100 0
b110100 Z
#110
b111000 U
b111000 V
#112
0"
#116
1"
#117
b111000 !
b111000 0
b111000 Z
#118
b111100 U
b111100 V
#120
0"
#124
1"
#125
b111100 !
b111100 0
b111100 Z
#126
b1000000 U
b1000000 V
#128
0"
#132
1"
#133
b1000000 !
b1000000 0
b1000000 Z
#134
b1000100 U
b1000100 V
#136
0"
#140
1"
#141
b1000100 !
b1000100 0
b1000100 Z
#142
b1001000 U
b1001000 V
#144
0"
#148
1"
#149
b1001000 !
b1001000 0
b1001000 Z
#150
b1001100 U
b1001100 V
#152
0"
#156
1"
#157
b1001100 !
b1001100 0
b1001100 Z
#158
b1010000 U
b1010000 V
#160
0"
#164
1"
#165
b1010000 !
b1010000 0
b1010000 Z
#166
b1010100 U
b1010100 V
#168
0"
#172
1"
#173
b1010100 !
b1010100 0
b1010100 Z
#174
b1011000 U
b1011000 V
#176
0"
#180
1"
#181
b1011000 !
b1011000 0
b1011000 Z
#182
b1011100 U
b1011100 V
#184
0"
#188
1"
#189
b1011100 !
b1011100 0
b1011100 Z
#190
b1100000 U
b1100000 V
#192
0"
#196
1"
#197
b1100000 !
b1100000 0
b1100000 Z
#198
b1100100 U
b1100100 V
#200
0"
#204
1"
#205
b1100100 !
b1100100 0
b1100100 Z
#206
b1101000 U
b1101000 V
#208
0"
#212
1"
#213
b1101000 !
b1101000 0
b1101000 Z
#214
b1101100 U
b1101100 V
#216
0"
#220
1"
#221
b1101100 !
b1101100 0
b1101100 Z
#222
b1110000 U
b1110000 V
#224
0"
#228
1"
#229
b1110000 !
b1110000 0
b1110000 Z
#230
b1110100 U
b1110100 V
#232
0"
#236
1"
#237
b1110100 !
b1110100 0
b1110100 Z
#238
b1111000 U
b1111000 V
#240
0"
#244
1"
#245
b1111000 !
b1111000 0
b1111000 Z
#246
b1111100 U
b1111100 V
#248
0"
#252
1"
#253
b1111100 !
b1111100 0
b1111100 Z
#254
b10000000 U
b10000000 V
#256
0"
#260
1"
#261
b10000000 !
b10000000 0
b10000000 Z
#262
b10000100 U
b10000100 V
#264
0"
#268
1"
#269
b10000100 !
b10000100 0
b10000100 Z
#270
b10001000 U
b10001000 V
#272
0"
#276
1"
#277
b10001000 !
b10001000 0
b10001000 Z
#278
b10001100 U
b10001100 V
#280
0"
#284
1"
#285
b10001100 !
b10001100 0
b10001100 Z
#286
b10010000 U
b10010000 V
#288
0"
#292
1"
#293
b10010000 !
b10010000 0
b10010000 Z
#294
b10010100 U
b10010100 V
#296
0"
#300
1"
#301
b10010100 !
b10010100 0
b10010100 Z
#302
b10011000 U
b10011000 V
#304
0"
#308
1"
#309
b10011000 !
b10011000 0
b10011000 Z
#310
b10011100 U
b10011100 V
#312
0"
#316
1"
#317
b10011100 !
b10011100 0
b10011100 Z
#318
b10100000 U
b10100000 V
#320
0"
#324
1"
#325
b10100000 !
b10100000 0
b10100000 Z
#326
b10100100 U
b10100100 V
#328
0"
#332
1"
#333
b10100100 !
b10100100 0
b10100100 Z
#334
b10101000 U
b10101000 V
#336
0"
#340
1"
#341
b10101000 !
b10101000 0
b10101000 Z
#342
b10101100 U
b10101100 V
#344
0"
#348
1"
#349
b10101100 !
b10101100 0
b10101100 Z
#350
b10110000 U
b10110000 V
#352
0"
#356
1"
#357
b10110000 !
b10110000 0
b10110000 Z
#358
b10110100 U
b10110100 V
#360
0"
#364
1"
#365
b10110100 !
b10110100 0
b10110100 Z
#366
b10111000 U
b10111000 V
#368
0"
#372
1"
#373
b10111000 !
b10111000 0
b10111000 Z
#374
b10111100 U
b10111100 V
#376
0"
#380
1"
#381
b10111100 !
b10111100 0
b10111100 Z
#382
b11000000 U
b11000000 V
#384
0"
#388
1"
#389
b11000000 !
b11000000 0
b11000000 Z
#390
b11000100 U
b11000100 V
#392
0"
#396
1"
#397
b11000100 !
b11000100 0
b11000100 Z
#398
b11001000 U
b11001000 V
#400
0"
#404
1"
#405
b11001000 !
b11001000 0
b11001000 Z
#406
b11001100 U
b11001100 V
#408
0"
#412
1"
#413
b11001100 !
b11001100 0
b11001100 Z
#414
b11010000 U
b11010000 V
#416
0"
#420
1"
#421
b11010000 !
b11010000 0
b11010000 Z
#422
b11010100 U
b11010100 V
#424
0"
#428
1"
#429
b11010100 !
b11010100 0
b11010100 Z
#430
b11011000 U
b11011000 V
#432
0"
#436
1"
#437
b11011000 !
b11011000 0
b11011000 Z
#438
b11011100 U
b11011100 V
#440
0"
#444
1"
#445
b11011100 !
b11011100 0
b11011100 Z
#446
b11100000 U
b11100000 V
#448
0"
#452
1"
#453
b11100000 !
b11100000 0
b11100000 Z
#454
b11100100 U
b11100100 V
#456
0"
#460
1"
#461
b11100100 !
b11100100 0
b11100100 Z
#462
b11101000 U
b11101000 V
#464
0"
#468
1"
#469
b11101000 !
b11101000 0
b11101000 Z
#470
b11101100 U
b11101100 V
#472
0"
#476
1"
#477
b11101100 !
b11101100 0
b11101100 Z
#478
b11110000 U
b11110000 V
#480
0"
#484
1"
#485
b11110000 !
b11110000 0
b11110000 Z
#486
b11110100 U
b11110100 V
#488
0"
#492
1"
#493
b11110100 !
b11110100 0
b11110100 Z
#494
b11111000 U
b11111000 V
#496
0"
#500
1"
#501
b11111000 !
b11111000 0
b11111000 Z
#502
b11111100 U
b11111100 V
#504
0"
#506
